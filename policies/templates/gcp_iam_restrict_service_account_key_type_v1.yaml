# Copyright 2019 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: templates.gatekeeper.sh/v1alpha1
kind: ConstraintTemplate
metadata:
  name: gcp-iam-restrict-service-account-key-type-v1
spec:
  crd:
    spec:
      names:
        kind: GCPIAMRestrictServiceAccountKeyTypeConstraintV1
      validation:
        openAPIV3Schema:
          properties: {}
  targets:
   validation.gcp.forsetisecurity.org:
      rego: | #INLINE("validator/gcp_iam_restrict_service_account_key_type.rego")
          # Copyright 2019 Google LLC
          #
          # Licensed under the Apache License, Version 2.0 (the "License");
          # you may not use this file except in compliance with the License.
          # You may obtain a copy of the License at
          #
          #      http://www.apache.org/licenses/LICENSE-2.0
          #
          # Unless required by applicable law or agreed to in writing, software
          # distributed under the License is distributed on an "AS IS" BASIS,
          # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
          # See the License for the specific language governing permissions and
          # limitations under the License.
          #
          
          package templates.gcp.GCPIAMRestrictServiceAccountKeyTypeConstraintV1
          
          import data.validator.gcp.lib as lib
          
          deny[{
          	"msg": message,
          	"details": metadata,
          }] {
          	constraint := input.constraint
          	asset := input.asset
          	asset.asset_type == "iam.googleapis.com/ServiceAccountKey"
          	key := asset.resource.data
          
          	keyType := lib.get_default(key, "keyType", "USER_MANAGED")
          	keyType == "USER_MANAGED"
          
          	message := sprintf("%v: key should not be user managed", [asset.name])
          	metadata := {"resource": asset.name}
          }
          #ENDINLINE
